'use client'

import { useForm } from "react-hook-form"
import { z } from "zod"
import { zodResolver } from "@hookform/resolvers/zod"
import { toast } from "sonner"

import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { UserProps } from "@/types/user.types";
import { useUsers } from "@/hooks/use-users"

const formSchema = z.object({
    name: z.string().min(3, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û"),
    phone: z.string().min(10, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"),
    email: z.string().email("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
    role: z.string(),
})

type MasterFormValues = z.infer<typeof formSchema>

export const MasterEdit = ({ data }: { data: UserProps }) => {
    const { updateUser } = useUsers(1, 1);
    const form = useForm<MasterFormValues>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            name: data.name || "",
            phone: data.phone || "",
            email: data.email || "",
            role: data.role.id.toString(),
        },
    })

    const onSubmit = async (values: MasterFormValues) => {
        console.warn("üì¶ –î–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞:", data)
        const payload = {
            name: values.name,
            phone: values.phone,
            email: values.email,
            role: +values.role,
        }

        try {
            await updateUser({ userId: data.id, updatedData: payload });
            toast.success('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        } catch (e) {
            console.error(e)
            toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')
        }

    }

    return (
        <div className="flex flex-col gap-4">
            <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 flex-auto">
                    {/* –§–ò–û */}
                    <FormField
                        control={form.control}
                        name="name"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>–§–ò–û</FormLabel>
                                <FormControl>
                                    <Input placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
                    <FormField
                        control={form.control}
                        name="phone"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>–¢–µ–ª–µ—Ñ–æ–Ω</FormLabel>
                                <FormControl>
                                    <Input placeholder="+7 (999) 123-45-67" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Email */}
                    <FormField
                        control={form.control}
                        name="email"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Email</FormLabel>
                                <FormControl>
                                    <Input placeholder="example@mail.ru" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* –†–æ–ª—å */}
                    <FormField
                        control={form.control}
                        name="role"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>–†–æ–ª—å</FormLabel>
                                <Select onValueChange={field.onChange} defaultValue={field.value.toString()}>
                                    <FormControl>
                                        <SelectTrigger>
                                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å" />
                                        </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                        <SelectItem value="1">–ú–∞—Å—Ç–µ—Ä</SelectItem>
                                        <SelectItem value="4">–ú–µ–Ω–µ–¥–∂–µ—Ä</SelectItem>
                                        <SelectItem value="3">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</SelectItem>
                                    </SelectContent>
                                </Select>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* –ö–Ω–æ–ø–∫–∞ */}
                    <Button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
                </form>
            </Form>
        </div>
    )
}