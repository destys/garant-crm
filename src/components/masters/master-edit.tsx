'use client'

import { useForm } from "react-hook-form"
import { z } from "zod"
import { zodResolver } from "@hookform/resolvers/zod"
import { jsPDF } from "jspdf";
import { useState } from "react"
import { CalendarIcon } from "lucide-react"
import { format } from "date-fns"
import { DateRange } from "react-day-picker"

import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover"
import { Calendar } from "@/components/ui/calendar"
import { cn } from "@/lib/utils"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"

const formSchema = z.object({
    fullName: z.string().min(3, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û"),
    phone: z.string().min(10, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"),
    email: z.string().email("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
    role: z.string(),
})

type MasterFormValues = z.infer<typeof formSchema>

export const MasterEdit = () => {
    const form = useForm<MasterFormValues>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            fullName: "",
            phone: "",
            email: "",
            role: "–ú–∞—Å—Ç–µ—Ä",
        },
    })

    // –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞
    const [dateRange, setDateRange] = useState<DateRange | undefined>()

    const handleDownloadPdf = () => {
        // dateRange.from –∏ dateRange.to –¥–æ—Å—Ç—É–ø–Ω—ã –∑–¥–µ—Å—å
        const doc = new jsPDF();
        doc.save("master-report.pdf");
    };

    const onSubmit = (data: MasterFormValues) => {
        console.warn("üì¶ –î–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞:", data)
        // TODO: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    }

    return (
        <div className="flex flex-col gap-4">
            <div className="mb-4 flex flex-col sm:flex-row gap-2 items-start sm:items-center">
                <Popover>
                    <PopoverTrigger asChild>
                        <Button
                            variant="outline"
                            className={cn(
                                "w-[260px] justify-start text-left font-normal",
                                !dateRange?.from && !dateRange?.to && "text-muted-foreground"
                            )}
                        >
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {dateRange?.from ? (
                                dateRange.to ? (
                                    `${format(dateRange.from, "dd.MM.yyyy")} ‚Äì ${format(dateRange.to, "dd.MM.yyyy")}`
                                ) : (
                                    format(dateRange.from, "dd.MM.yyyy")
                                )
                            ) : (
                                <span>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã</span>
                            )}
                        </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                            mode="range"
                            selected={dateRange}
                            onSelect={setDateRange}
                            defaultMonth={
                                dateRange?.from
                                    ? dateRange.from
                                    : new Date(new Date().getFullYear(), new Date().getMonth() - 1)
                            }
                            numberOfMonths={2}
                            className="rounded-lg border shadow-sm"
                        />
                    </PopoverContent>
                </Popover>
                <Button onClick={handleDownloadPdf}>
                    –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
                </Button>
            </div>
            <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 flex-auto">
                    {/* –§–ò–û */}
                    <FormField
                        control={form.control}
                        name="fullName"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>–§–ò–û</FormLabel>
                                <FormControl>
                                    <Input placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
                    <FormField
                        control={form.control}
                        name="phone"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>–¢–µ–ª–µ—Ñ–æ–Ω</FormLabel>
                                <FormControl>
                                    <Input placeholder="+7 (999) 123-45-67" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Email */}
                    <FormField
                        control={form.control}
                        name="email"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Email</FormLabel>
                                <FormControl>
                                    <Input placeholder="example@mail.ru" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* –†–æ–ª—å */}
                    <FormField
                        control={form.control}
                        name="role"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>–†–æ–ª—å</FormLabel>
                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                    <FormControl>
                                        <SelectTrigger>
                                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å" />
                                        </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                        <SelectItem value="–ú–∞—Å—Ç–µ—Ä">–ú–∞—Å—Ç–µ—Ä</SelectItem>
                                        <SelectItem value="–ú–µ–Ω–µ–¥–∂–µ—Ä">–ú–µ–Ω–µ–¥–∂–µ—Ä</SelectItem>
                                        <SelectItem value="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</SelectItem>
                                    </SelectContent>
                                </Select>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* –ö–Ω–æ–ø–∫–∞ */}
                    <Button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
                </form>
            </Form>
        </div>
    )
}